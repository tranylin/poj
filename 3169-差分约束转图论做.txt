#include <iostream>
#include <string.h>
#include <string>
#include <stdio.h>
#include <algorithm>
using namespace std;
#define MAXV 10010
#define MAXE 50010
#define INF 1234123412
int d[MAXV];
int V,E;
int N,ML,MD;
struct edge
{
    int from;
    int to;
    int cost;
};
struct edge G[MAXE];

void bellman_ford(int s)
{
    fill(d,d+V+1,INF);
    d[s]=0;

    for(int i=0;i<V;i++)
    {
        for(int j=0;j<E;j++)
        {
            struct edge e=G[j];
            if(d[e.to]>d[e.from]+e.cost)
            {
                d[e.to]=d[e.from]+e.cost;
            }
        }
    }
}

int main()
{
    int x1,x2,x3;
    scanf("%d%d%d",&V,&ML,&MD);
    E=ML+MD;
    for(int i=0;i<ML;i++)
    {
        scanf("%d%d%d",&x1,&x2,&x3);
        G[i].from=x1;
        G[i].to=x2;
        G[i].cost=x3;
    }
    for(int j=ML;j<ML+MD;j++)
    {
         scanf("%d%d%d",&x1,&x2,&x3);
        G[j].from=x2;
        G[j].to=x1;
        G[j].cost=-x3;
    }
    bellman_ford(1);
    if(d[1]<0)printf("-1\n");
    else
    {
        if(d[V]==INF)printf("-2\n");
        else printf("%d\n",d[V]);
    }
    return 0;
}



/*************

4 2 1
1 3 10
2 4 20
2 3 3

*******/

