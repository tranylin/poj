#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
using namespace std;
#define maxn 200010
int tree[maxn*4+50];
int lazy[maxn*4+50];
int ans;
void up(int rt)
{
    tree[rt]=max(tree[rt*2],tree[rt*2+1]);
}

void build(int l,int r,int rt)
{
    if(l==r)
    {
        scanf("%d",&tree[rt]);
        //tree[rt]=1;
        return ;
    }
    int mid=(l+r)/2;
    build(l,mid,rt*2);
    build(mid+1,r,rt*2+1);
    up(rt);
}

void sin_up(int l,int r,int rt,int pos,int val)
{
    if(l==r)
    {
        tree[rt]=val;
        return ;
    }
    int mid=(l+r)/2;
    if(pos<=mid)sin_up(l,mid,rt*2,pos,val);
    else sin_up(mid+1,r,rt*2+1,pos,val);
    up(rt);

}

void getsum(int l,int r,int rt,int ql,int qr)
{
    if(ql<=l&&qr>=r)
    {
        ans=max(ans,tree[rt]);
        return ;
    }
    int mid=(l+r)/2;
    if(ql<=mid)getsum(l,mid,rt*2,ql,qr);
    if(qr>mid)getsum(mid+1,r,rt*2+1,ql,qr);
}



int main()
{
    char s[2];
    int ql,qr;
    int N,M;
    while(scanf("%d%d",&N,&M)!=EOF)
    {
        memset(tree,0,sizeof(tree));
        build(1,N,1);

        for(int j=1;j<=M;j++)
        {
            scanf("%s%d%d",&s,&ql,&qr);
            if(s[0]=='Q')
            {
                ans=-1;
                getsum(1,N,1,ql,qr);
                printf("%d\n",ans);
            }
            else
            {
                sin_up(1,N,1,ql,qr);
            }
        }
    }
    return 0;
}
