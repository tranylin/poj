#include <iostream>
#include <stdio.h>
#include <string.h>
#include <set>
#include <string>
#include <queue>
#include <map>
#include <vector>
#include <math.h>
#include <sstream>
#include <algorithm>
#include <stack>
#include <time.h>
#include <functional>
using namespace std;
int N,K,M;
#define INF 1234123412

int V;
struct edge
{
    int to;
    int cost;
};
typedef pair<int,int> P;
vector<struct edge> G[5050];
int d[5050];
int d2[5050];


void dijkstra1(int s)
{
    priority_queue<P,vector<P>,greater<P> > que;
    fill(d,d+V+1,INF);
    fill(d2,d2+V+1,INF);
    d[s]=0;
    que.push(P{0,s});

    while(!que.empty())
    {
        P p=que.top();
        que.pop();
        int v=p.second;
        if(d2[v]<p.first)continue;
        for(int i=0;i<G[v].size();i++)
        {
            edge e=G[v][i];
            int d22=p.first+e.cost;
            if(d[e.to]>d22)
            {
                swap(d[e.to],d22);
                que.push(P{d[e.to],e.to});
            }
            if(d2[e.to]>d22&&d[e.to]<d22)
            {
                d2[e.to]=d22;
                que.push(P{d2[e.to],e.to});

            }
        }
    }
}

int main()
{
    int x1,x2,x3;
    scanf("%d%d",&V,&K);
    struct edge tmp;
    for(int i=0;i<K;i++)
    {
        scanf("%d%d%d",&x1,&x2,&x3);
        tmp.to=x2;
        tmp.cost=x3;
        G[x1].push_back(tmp);
        tmp.to=x1;
        G[x2].push_back(tmp);
    }

    dijkstra1(1);
    printf("%d\n",d2[V]);
    return 0;
}
